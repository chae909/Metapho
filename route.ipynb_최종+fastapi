{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1YWjMiyeSLMGn71S9yQ8WG8BeuqKWCV-w","timestamp":1732309271619},{"file_id":"1UbFggCfTUmtCyJ7yxTKOEc7AFh-fIoVK","timestamp":1732306334164}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from datetime import date\n","import random\n","from itertools import permutations\n","import math\n","from math import radians, sin, cos, sqrt, atan2"],"metadata":{"id":"IuNodzWK916t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install fastapi uvicorn nest-asyncio pyngrok\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NNo8oZK7IP-Z","executionInfo":{"status":"ok","timestamp":1732322558174,"user_tz":-540,"elapsed":6986,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"74ce31de-7bcf-4f1c-bb09-4e04e2265503"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: fastapi in /usr/local/lib/python3.10/dist-packages (0.115.5)\n","Requirement already satisfied: uvicorn in /usr/local/lib/python3.10/dist-packages (0.32.1)\n","Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (1.6.0)\n","Requirement already satisfied: pyngrok in /usr/local/lib/python3.10/dist-packages (7.2.1)\n","Requirement already satisfied: starlette<0.42.0,>=0.40.0 in /usr/local/lib/python3.10/dist-packages (from fastapi) (0.41.3)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from fastapi) (2.9.2)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from fastapi) (4.12.2)\n","Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn) (8.1.7)\n","Requirement already satisfied: h11>=0.8 in /usr/local/lib/python3.10/dist-packages (from uvicorn) (0.14.0)\n","Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.10/dist-packages (from pyngrok) (6.0.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi) (2.23.4)\n","Requirement already satisfied: anyio<5,>=3.4.0 in /usr/local/lib/python3.10/dist-packages (from starlette<0.42.0,>=0.40.0->fastapi) (3.7.1)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.4.0->starlette<0.42.0,>=0.40.0->fastapi) (3.10)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.4.0->starlette<0.42.0,>=0.40.0->fastapi) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.4.0->starlette<0.42.0,>=0.40.0->fastapi) (1.2.2)\n"]}]},{"cell_type":"code","source":["def calculate_distance(point1, point2):\n","    R = 6371  # 지구의 반경 (km)\n","\n","    lat1, lon1 = point1\n","    lat2, lon2 = point2\n","\n","    # 위도와 경도를 라디안으로 변환\n","    lat1, lon1 = radians(lat1), radians(lon1)\n","    lat2, lon2 = radians(lat2), radians(lon2)\n","\n","    # 위도와 경도의 차이\n","    dlat = lat2 - lat1\n","    dlon = lon2 - lon1\n","\n","    # 하버사인 공식\n","    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n","    c = 2 * atan2(sqrt(a), sqrt(1-a))\n","    distance = R * c\n","\n","    return distance"],"metadata":{"id":"sfdB009n923F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def find_shortest_path(start_point, points):\n","    if not points:\n","        return [], 0\n","\n","    min_distance = float('inf')\n","    best_path = []\n","\n","    for path in permutations(points):\n","        current_point = start_point\n","        total_distance = 0\n","\n","        for next_point in path:\n","            total_distance += calculate_distance(current_point, next_point)\n","            current_point = next_point\n","\n","        if total_distance < min_distance:\n","            min_distance = total_distance\n","            best_path = list(path)\n","\n","    return best_path, min_distance\n"],"metadata":{"id":"d5f6vcsWMIyK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def create_route_plan(patients, doctor_location, additional_calls):\n","    # 1. 환자 분류\n","    priority_patients = []\n","    additional_patients = []\n","    normal_patients = []\n","\n","    for patient in patients:\n","        distance = calculate_distance(doctor_location, patient['location'])\n","        if distance <= 5:  # 5km 이내 환자만 처리\n","            if patient['remaining_days'] <= 0:\n","                priority_patients.append(patient)\n","            else:\n","                if patient['id'] in additional_calls:\n","                    additional_patients.append(patient)\n","                else:\n","                    normal_patients.append(patient)\n","\n","    # 2. 리스트 합치기\n","    combined_list = priority_patients + additional_patients + normal_patients\n","\n","    # 3. 랜덤 환자 수 선택 및 route_plan 생성\n","    random.seed(date.today().toordinal())\n","    patients_count = random.randint(4, 7)\n","    patients_count = 10\n","    route_plan = combined_list[:min(patients_count, len(combined_list))]\n","\n","    # 4. 우선순위 환자들의 최단 경로 계산\n","    priority_locations = [p['location'] for p in route_plan if p in priority_patients]\n","    best_route, _ = find_shortest_path(doctor_location, priority_locations)\n","\n","    # 5. 추가 호출 환자 경로 추가\n","    if any(p in additional_patients for p in route_plan):\n","        additional_locations = [p['location'] for p in route_plan if p in additional_patients]\n","        if best_route:\n","            additional_path, _ = find_shortest_path(best_route[-1], additional_locations)\n","            best_route.extend(additional_path)\n","        else:\n","            additional_path, _ = find_shortest_path(doctor_location, additional_locations)\n","            best_route.extend(additional_path)\n","\n","    # 6. 일반 환자 경로 추가\n","    if any(p in normal_patients for p in route_plan):\n","        normal_locations = [p['location'] for p in route_plan if p in normal_patients]\n","        if best_route:\n","            normal_path, _ = find_shortest_path(best_route[-1], normal_locations)\n","            best_route.extend(normal_path)\n","        else:\n","            normal_path, _ = find_shortest_path(doctor_location, normal_locations)\n","            best_route.extend(normal_path)\n","\n","    return best_route\n"],"metadata":{"id":"5gODsvxP9251"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from geopy.geocoders import Nominatim\n","\n","# Geolocator 객체 생성\n","geolocator = Nominatim(user_agent=\"South Korea\")\n","\n","# 주소\n","address = \"경기도 \"\n","\n","# 주소로부터 위도와 경도를 얻음\n","location = geolocator.geocode(address)\n","\n","# 결과 출력\n","if location:\n","    print(f\"Address: {address}\")\n","    print(f\"Latitude: {location.latitude}, Longitude: {location.longitude}\")\n","else:\n","    print(\"Location not found.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R4m_j7KP5ZJR","executionInfo":{"status":"ok","timestamp":1732322559582,"user_tz":-540,"elapsed":1416,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"22364c29-3dac-4db6-fb5d-4e3cded37e3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Address: 경기도 \n","Latitude: 37.2884675, Longitude: 127.0535231\n"]}]},{"cell_type":"code","source":["# 주어진 데이터\n","doctor_loc = [37.2636, 127.0286]\n","patients = [\n","    {\n","            'id': 1,\n","            'location': [37.2650, 127.0300],  # 시청 근처\n","            'remaining_days': -2  # 2일 지난 환자\n","        },\n","        {\n","            'id': 2,\n","            'location': [37.2620, 127.0270],  # 시청 근처\n","            'remaining_days': -5  # 5일 지난 환자\n","        },\n","        {\n","            'id': 3,\n","            'location': [37.2645, 127.0320],  # 시청 근처\n","            'remaining_days': 3   # 3일 후 진료 예정\n","        },\n","        {\n","            'id': 4,\n","            'location': [37.2615, 127.0260],  # 시청 근처\n","            'remaining_days': -1  # 1일 지난 환자\n","        },\n","        {\n","            'id': 5,\n","            'location': [37.2670, 127.0290],  # 시청 근처\n","            'remaining_days': 1   # 1일 후 진료 예정\n","        },\n","        {\n","            'id': 6,\n","            'location': [37.2600, 127.0250],  # 시청 근처\n","            'remaining_days': -7  # 7일 지난 환자\n","        },\n","        {\n","            'id': 7,\n","            'location': [37.2660, 127.0350],  # 시청 근처\n","            'remaining_days': -3  # 3일 지난 환자\n","        },\n","        {\n","            'id': 8,\n","            'location': [37.2585, 127.0235],  # 시청 근처\n","            'remaining_days': 2   # 2일 후 진료 예정\n","        },\n","        {\n","            'id': 9,\n","            'location': [37.2700, 127.0370],  # 시청 근처\n","            'remaining_days': -4  # 4일 지난 환자\n","        },\n","        {\n","            'id': 10,\n","            'location': [37.2680, 127.0330],  # 시청 근처\n","            'remaining_days': 4   # 4일 후 진료 예정\n","        },\n","        {\n","            'id': 11,\n","            'location': [37.2590, 127.0220],  # 시청 근처\n","            'remaining_days': -6  # 6일 지난 환자\n","        },\n","        {\n","            'id': 12,\n","            'location': [37.2710, 127.0385],  # 시청 근처\n","            'remaining_days': 5   # 5일 후 진료 예정\n","        },\n","        {\n","            'id': 13,\n","            'location': [37.2575, 127.0205],  # 시청 근처\n","            'remaining_days': -8  # 8일 지난 환자\n","        },\n","        {\n","            'id': 14,\n","            'location': [37.2630, 127.0360],  # 시청 근처\n","            'remaining_days': 0   # 당일 진료 예정\n","        },\n","        {\n","            'id': 15,\n","            'location': [37.2655, 127.02559],  # 시청 근처\n","            'remaining_days': -9  # 9일 지난 환자\n","        }\n","]\n","additional_calls = [3, 11]\n","\n","# 경로 계산 및 출력\n","best_route = create_route_plan(patients, doctor_loc, additional_calls)\n","\n","print(\"=== 방문 경로 상세 정보 ===\")\n","print(f\"\\n오늘 방문 환자 수 : {len(best_route)}\")\n","for i, location in enumerate(best_route, 1):\n","    patient = next(p for p in patients if p['location'] == location)\n","    print(f\"\\n{i}번째 방문:\")\n","    print(f\"환자 ID: {patient['id']}\")\n","    print(f\"남은 일수: {patient['remaining_days']}\")\n","    print(f\"추가 호출 여부: {'예' if patient['id'] in additional_calls else '아니오'}\\n\")\n","\n","\n","for i in range(len(best_route)):\n","    if i == 0:\n","        print(\"의사와 1번째 환자 사이의 거리 : \",int(calculate_distance(doctor_loc, best_route[i])*1000),\"m\")\n","        i += 1\n","    else:\n","        print(f\"{i}번째 환자와 {i+1}번째 환자 사이의 거리 : \", int(calculate_distance(best_route[i-1], best_route[i])*1000),\"m\")\n","        i += 1\n","\n","route_summary = [\n","    {\n","        \"ID\": next(p['id'] for p in patients if p['location'] == loc),\n","        \"remaining_days\": next(p['remaining_days'] for p in patients if p['location'] == loc),\n","        \"location\": loc\n","    }\n","    for loc in best_route\n","]\n","for patient_info in route_summary:\n","    print(patient_info)"],"metadata":{"id":"sy8WqvMn928N","executionInfo":{"status":"ok","timestamp":1732322619594,"user_tz":-540,"elapsed":60018,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5ebb9e07-76f4-4ee7-ee3a-abebd2fddbd5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["=== 방문 경로 상세 정보 ===\n","\n","오늘 방문 환자 수 : 10\n","\n","1번째 방문:\n","환자 ID: 2\n","남은 일수: -5\n","추가 호출 여부: 아니오\n","\n","\n","2번째 방문:\n","환자 ID: 4\n","남은 일수: -1\n","추가 호출 여부: 아니오\n","\n","\n","3번째 방문:\n","환자 ID: 6\n","남은 일수: -7\n","추가 호출 여부: 아니오\n","\n","\n","4번째 방문:\n","환자 ID: 13\n","남은 일수: -8\n","추가 호출 여부: 아니오\n","\n","\n","5번째 방문:\n","환자 ID: 11\n","남은 일수: -6\n","추가 호출 여부: 예\n","\n","\n","6번째 방문:\n","환자 ID: 15\n","남은 일수: -9\n","추가 호출 여부: 아니오\n","\n","\n","7번째 방문:\n","환자 ID: 1\n","남은 일수: -2\n","추가 호출 여부: 아니오\n","\n","\n","8번째 방문:\n","환자 ID: 14\n","남은 일수: 0\n","추가 호출 여부: 아니오\n","\n","\n","9번째 방문:\n","환자 ID: 7\n","남은 일수: -3\n","추가 호출 여부: 아니오\n","\n","\n","10번째 방문:\n","환자 ID: 9\n","남은 일수: -4\n","추가 호출 여부: 아니오\n","\n","의사와 1번째 환자 사이의 거리 :  227 m\n","1번째 환자와 2번째 환자 사이의 거리 :  104 m\n","2번째 환자와 3번째 환자 사이의 거리 :  188 m\n","3번째 환자와 4번째 환자 사이의 거리 :  485 m\n","4번째 환자와 5번째 환자 사이의 거리 :  213 m\n","5번째 환자와 6번째 환자 사이의 거리 :  789 m\n","6번째 환자와 7번째 환자 사이의 거리 :  394 m\n","7번째 환자와 8번째 환자 사이의 거리 :  575 m\n","8번째 환자와 9번째 환자 사이의 거리 :  345 m\n","9번째 환자와 10번째 환자 사이의 거리 :  478 m\n","{'ID': 2, 'remaining_days': -5, 'location': [37.262, 127.027]}\n","{'ID': 4, 'remaining_days': -1, 'location': [37.2615, 127.026]}\n","{'ID': 6, 'remaining_days': -7, 'location': [37.26, 127.025]}\n","{'ID': 13, 'remaining_days': -8, 'location': [37.2575, 127.0205]}\n","{'ID': 11, 'remaining_days': -6, 'location': [37.259, 127.022]}\n","{'ID': 15, 'remaining_days': -9, 'location': [37.2655, 127.02559]}\n","{'ID': 1, 'remaining_days': -2, 'location': [37.265, 127.03]}\n","{'ID': 14, 'remaining_days': 0, 'location': [37.263, 127.036]}\n","{'ID': 7, 'remaining_days': -3, 'location': [37.266, 127.035]}\n","{'ID': 9, 'remaining_days': -4, 'location': [37.27, 127.037]}\n"]}]},{"cell_type":"markdown","source":["# 지도 시각화"],"metadata":{"id":"FMVobaOyAo2s"}},{"cell_type":"code","source":["!ngrok config add-authtoken \"EA6NHGIRTLM6T7KRW2LLFDTOZCHSHFJP\"\n","\n","import json\n","from fastapi import FastAPI, HTTPException, Query\n","from fastapi.middleware.cors import CORSMiddleware\n","from pydantic import BaseModel\n","import uvicorn\n","from google.colab import output\n","import asyncio\n","\n","from typing import List\n","import numpy as np\n","\n","def calculate_distance(coord1, coord2):\n","    \"\"\"두 지점 간의 거리를 계산하는 함수\"\"\"\n","    return np.sqrt((coord1[0] - coord2[0])**2 + (coord1[1] - coord2[1])**2)\n","\n","def create_route_plan(patients: List[dict], additional_calls: List[int]) -> List[List[float]]:\n","    \"\"\"환자 방문 경로를 계산하는 함수\"\"\"\n","    # 우선순위 환자 (remaining_days <= 0)\n","    priority_patients = [p for p in patients if p['remaining_days'] <= 0]\n","\n","    # 추가 호출 환자\n","    additional_patients = [p for p in patients if p['id'] in additional_calls and p['remaining_days'] > 0]\n","\n","    # 일반 환자\n","    normal_patients = [p for p in patients if p['remaining_days'] > 0 and p['id'] not in additional_calls]\n","\n","    # 방문 순서: 우선순위 환자 -> 추가 호출 환자 -> 일반 환자\n","    ordered_patients = priority_patients + additional_patients + normal_patients\n","\n","    return [p['location'] for p in ordered_patients]\n","\n","# FastAPI 앱 생성\n","app = FastAPI(\n","    title=\"방문 경로 최적화 API\",\n","    description=\"의사의 환자 방문 경로를 최적화하는 API 서비스입니다.\",\n","    version=\"1.0.0\",\n","    docs_url=\"/docs\")\n","\n","# CORS 설정\n","app.add_middleware(\n","    CORSMiddleware,\n","    allow_origins=[\"*\"],\n","    allow_credentials=True,\n","    allow_methods=[\"*\"],\n","    allow_headers=[\"*\"],\n",")\n","\n","# 데이터 모델 정의\n","class PatientData(BaseModel):\n","    patients: list\n","    additional_calls: list\n","\n","# 기본 환자 데이터\n","DEFAULT_PATIENTS = [\n","    {\n","        'id': 1,\n","        'location': [37.2650, 127.0300],\n","        'remaining_days': -2\n","    },\n","    {\n","        'id': 2,\n","        'location': [37.2620, 127.0270],\n","        'remaining_days': -5\n","    },\n","    {\n","        'id': 3,\n","        'location': [37.2645, 127.0320],\n","        'remaining_days': 3\n","    },\n","    {\n","        'id': 4,\n","        'location': [37.2615, 127.0260],\n","        'remaining_days': -1\n","    },\n","    {\n","        'id': 5,\n","        'location': [37.2670, 127.0290],\n","        'remaining_days': 1\n","    }\n","]\n","\n","# 기본 경로 추가\n","@app.get(\"/\",\n","    summary=\"환자 데이터 및 경로 조회\",\n","    description=\"현재 등록된 환자 데이터와 계산된 경로를 반환합니다.\",\n","    response_description=\"환자 데이터 및 경로 정보\")\n","async def get_data(\n","    # 환자 데이터 (JSON 문자열)\n","    patients_data: str = Query(\n","        default=json.dumps(DEFAULT_PATIENTS),\n","        description=\"환자 데이터 JSON 배열 문자열\"\n","    ),\n","\n","    # 추가 호출 환자 ID들 (쉼표로 구분)\n","    additional_calls: str = Query(\n","        default=\"3,11\",\n","        description=\"추가 호출 환자 ID (쉼표로 구분)\"\n","    )\n","):\n","    try:\n","        # JSON 문자열을 파이썬 객체로 변환\n","        patients = json.loads(patients_data)\n","\n","        # 추가 호출 환자 ID 리스트 변환\n","        additional_calls_list = [int(x.strip()) for x in additional_calls.split(\",\") if x.strip()]\n","\n","\n","        # 경로 계산\n","        route = create_route_plan(patients, additional_calls_list)\n","\n","        # 경로 상세 정보 생성\n","        route_details = []\n","        for i, location in enumerate(route, 1):\n","            patient = next(p for p in patients if p['location'] == location)\n","            status = \"우선순위 환자\" if patient['remaining_days'] <= 0 else \\\n","                    \"추가 호출 환자\" if patient['id'] in additional_calls_list else \\\n","                    \"일반 환자\"\n","\n","            route_details.append({\n","                \"order\": i,\n","                \"patient_id\": patient['id'],\n","                \"status\": status,\n","                \"location\": location,\n","                \"remaining_days\": patient['remaining_days']\n","            })\n","\n","        return {\n","            \"status\": \"success\",\n","            \"data\": {\n","                \"patients\": patients,\n","                \"additional_calls\": additional_calls_list,\n","                \"calculated_route\": route,\n","                \"route_details\": route_details\n","            }\n","        }\n","\n","    except json.JSONDecodeError:\n","        raise HTTPException(status_code=400, detail=\"잘못된 JSON 형식입니다\")\n","    except Exception as e:\n","        raise HTTPException(status_code=500, detail=str(e))\n","\n","# 서버 실행을 위한 함수\n","async def run_server():\n","    config = uvicorn.Config(app, host=\"0.0.0.0\", port=8025, log_level=\"info\")\n","    server = uvicorn.Server(config)\n","    await server.serve()\n","\n","# Colab에서 실행\n","from IPython.display import clear_output\n","import threading\n","\n","def run_fastapi():\n","    asyncio.run(run_server())\n","\n","# 새로운 스레드에서 서버 실행\n","thread = threading.Thread(target=run_fastapi, daemon=True)\n","thread.start()\n","\n","# URL 출력\n","print(\"서버가 시작되었습니다.\")\n","output.serve_kernel_port_as_window(8025)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":216},"id":"aSq537I2IUkw","executionInfo":{"status":"ok","timestamp":1732324386412,"user_tz":-540,"elapsed":549,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"e0a9b354-b7f2-4e9d-9ce6-1c4135a44ea9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml\n","서버가 시작되었습니다.\n","\u001b[31mWarning: This function may stop working due to changes in browser security.\n","Try `serve_kernel_port_as_iframe` instead. \u001b[0m\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["(async (port, path, text, element) => {\n","    if (!google.colab.kernel.accessAllowed) {\n","      return;\n","    }\n","    element.appendChild(document.createTextNode(''));\n","    const url = await google.colab.kernel.proxyPort(port);\n","    const anchor = document.createElement('a');\n","    anchor.href = new URL(path, url).toString();\n","    anchor.target = '_blank';\n","    anchor.setAttribute('data-href', url + path);\n","    anchor.textContent = text;\n","    element.appendChild(anchor);\n","  })(8025, \"/\", \"https://localhost:8025/\", window.element)"]},"metadata":{}},{"output_type":"stream","name":"stderr","text":["INFO:     Started server process [23899]\n","INFO:     Waiting for application startup.\n","INFO:     Application startup complete.\n","ERROR:    [Errno 98] error while attempting to bind on address ('0.0.0.0', 8025): address already in use\n","INFO:     Waiting for application shutdown.\n","INFO:     Application shutdown complete.\n"]}]},{"cell_type":"code","source":["!pip install folium\n","\n","# 필요한 라이브러리 임포트\n","import folium\n","from folium import plugins"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-3HBaLfN6ptH","executionInfo":{"status":"ok","timestamp":1732322627473,"user_tz":-540,"elapsed":6893,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"4d26def6-b9cc-4011-8144-76453f20ec80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:     Started server process [23899]\n","INFO:     Waiting for application startup.\n","INFO:     Application startup complete.\n","INFO:     Uvicorn running on http://0.0.0.0:8020 (Press CTRL+C to quit)\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: folium in /usr/local/lib/python3.10/dist-packages (0.18.0)\n","Requirement already satisfied: branca>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from folium) (0.8.0)\n","Requirement already satisfied: jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from folium) (3.1.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from folium) (1.26.4)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from folium) (2.32.3)\n","Requirement already satisfied: xyzservices in /usr/local/lib/python3.10/dist-packages (from folium) (2024.9.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=2.9->folium) (3.0.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->folium) (2024.8.30)\n","INFO:     127.0.0.1:52340 - \"GET /?authuser=0 HTTP/1.1\" 500 Internal Server Error\n"]}]},{"cell_type":"code","source":["patients = [route_summary]\n","\n","# 지도 초기화 (수원 중심)\n","m = folium.Map(location=[37.2636, 127.0286], zoom_start=14)\n","\n","# 마커 위치 리스트 (선 그리기 위해)\n","locations = []\n","\n","# 방문 순서대로 마커 추가\n","for patient_info in route_summary:\n","    folium.Marker(\n","        location=patient_info['location'],  # 위치\n","        popup=f\"ID: {patient_info['ID']}<br>Remaining Days: {patient_info['remaining_days']}\",  # 팝업 내용\n","        icon=folium.Icon(color='blue', icon='info-sign')  # 마커 아이콘\n","    ).add_to(m)\n","\n","    # 위치 리스트에 추가 (마커들 연결을 위해)\n","    locations.append(patient_info['location'])\n","\n","# 마커들 이어주는 선 추가\n","folium.PolyLine(locations, color='blue', weight=2.5, opacity=1).add_to(m)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SxiivBPdA43f","executionInfo":{"status":"ok","timestamp":1732322627473,"user_tz":-540,"elapsed":53,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"b25f7256-b664-4270-f7bb-0d47af35f9fc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<folium.vector_layers.PolyLine at 0x7decea116f20>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["m"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":865},"id":"0rYZpkUmBE2n","executionInfo":{"status":"ok","timestamp":1732322627474,"user_tz":-540,"elapsed":36,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"10ee7a04-87eb-427e-e215-74a795288fec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<folium.folium.Map at 0x7deccda53730>"],"text/html":["<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n","&lt;html&gt;\n","&lt;head&gt;\n","    \n","    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n","    \n","        &lt;script&gt;\n","            L_NO_TOUCH = false;\n","            L_DISABLE_3D = false;\n","        &lt;/script&gt;\n","    \n","    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n","    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n","    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n","    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n","    \n","            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n","                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n","            &lt;style&gt;\n","                #map_755eab054921a222b88b150cb264d00b {\n","                    position: relative;\n","                    width: 100.0%;\n","                    height: 100.0%;\n","                    left: 0.0%;\n","                    top: 0.0%;\n","                }\n","                .leaflet-container { font-size: 1rem; }\n","            &lt;/style&gt;\n","        \n","&lt;/head&gt;\n","&lt;body&gt;\n","    \n","    \n","            &lt;div class=&quot;folium-map&quot; id=&quot;map_755eab054921a222b88b150cb264d00b&quot; &gt;&lt;/div&gt;\n","        \n","&lt;/body&gt;\n","&lt;script&gt;\n","    \n","    \n","            var map_755eab054921a222b88b150cb264d00b = L.map(\n","                &quot;map_755eab054921a222b88b150cb264d00b&quot;,\n","                {\n","                    center: [37.2636, 127.0286],\n","                    crs: L.CRS.EPSG3857,\n","                    zoom: 14,\n","                    zoomControl: true,\n","                    preferCanvas: false,\n","                }\n","            );\n","\n","            \n","\n","        \n","    \n","            var tile_layer_cda90b8190e0a5d898c3d2767e845eb2 = L.tileLayer(\n","                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n","                {&quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n","            );\n","        \n","    \n","            tile_layer_cda90b8190e0a5d898c3d2767e845eb2.addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var marker_a787c2f3cb4bc99b518ae1279749eddc = L.marker(\n","                [37.262, 127.027],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_2e1b15535126d5faff09afa11ac64edd = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_a787c2f3cb4bc99b518ae1279749eddc.setIcon(icon_2e1b15535126d5faff09afa11ac64edd);\n","        \n","    \n","        var popup_75670e5175c2129f8916d2c4cbdc2cb1 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_d64d65c062faed8ddc55a871aa5291c4 = $(`&lt;div id=&quot;html_d64d65c062faed8ddc55a871aa5291c4&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 2&lt;br&gt;Remaining Days: -5&lt;/div&gt;`)[0];\n","                popup_75670e5175c2129f8916d2c4cbdc2cb1.setContent(html_d64d65c062faed8ddc55a871aa5291c4);\n","            \n","        \n","\n","        marker_a787c2f3cb4bc99b518ae1279749eddc.bindPopup(popup_75670e5175c2129f8916d2c4cbdc2cb1)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_f8d3032f8c9985672f21ca2df7443f98 = L.marker(\n","                [37.2615, 127.026],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_165551d795a350da47bacc36d0a1d0db = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_f8d3032f8c9985672f21ca2df7443f98.setIcon(icon_165551d795a350da47bacc36d0a1d0db);\n","        \n","    \n","        var popup_3cf36bd36d1ae83c345116c51dfd5eec = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_0c55221f3762c9108fdddff6e8df1d54 = $(`&lt;div id=&quot;html_0c55221f3762c9108fdddff6e8df1d54&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 4&lt;br&gt;Remaining Days: -1&lt;/div&gt;`)[0];\n","                popup_3cf36bd36d1ae83c345116c51dfd5eec.setContent(html_0c55221f3762c9108fdddff6e8df1d54);\n","            \n","        \n","\n","        marker_f8d3032f8c9985672f21ca2df7443f98.bindPopup(popup_3cf36bd36d1ae83c345116c51dfd5eec)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_e43bd0a06db5c5fa57ad91b9833ed397 = L.marker(\n","                [37.26, 127.025],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_4b0827755509a25c5dff7d30aa13c057 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_e43bd0a06db5c5fa57ad91b9833ed397.setIcon(icon_4b0827755509a25c5dff7d30aa13c057);\n","        \n","    \n","        var popup_655dc73928c85af33d7ae17b00f1ea4a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_d786e3a7e78e733de13f0cc548a80c81 = $(`&lt;div id=&quot;html_d786e3a7e78e733de13f0cc548a80c81&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 6&lt;br&gt;Remaining Days: -7&lt;/div&gt;`)[0];\n","                popup_655dc73928c85af33d7ae17b00f1ea4a.setContent(html_d786e3a7e78e733de13f0cc548a80c81);\n","            \n","        \n","\n","        marker_e43bd0a06db5c5fa57ad91b9833ed397.bindPopup(popup_655dc73928c85af33d7ae17b00f1ea4a)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_027b1209184feaf85a2edb07e52f0d05 = L.marker(\n","                [37.2575, 127.0205],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_0590fe277654460650a9b852f4b6ede1 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_027b1209184feaf85a2edb07e52f0d05.setIcon(icon_0590fe277654460650a9b852f4b6ede1);\n","        \n","    \n","        var popup_f41caf1f95c3bc1a91174d345c94de02 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_dc6532f86700d3f82ffef8317b07d413 = $(`&lt;div id=&quot;html_dc6532f86700d3f82ffef8317b07d413&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 13&lt;br&gt;Remaining Days: -8&lt;/div&gt;`)[0];\n","                popup_f41caf1f95c3bc1a91174d345c94de02.setContent(html_dc6532f86700d3f82ffef8317b07d413);\n","            \n","        \n","\n","        marker_027b1209184feaf85a2edb07e52f0d05.bindPopup(popup_f41caf1f95c3bc1a91174d345c94de02)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_180458e14619cc44b567432c82be313b = L.marker(\n","                [37.259, 127.022],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_834c6a8a2bb9c41b3930a6757eb6c5e9 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_180458e14619cc44b567432c82be313b.setIcon(icon_834c6a8a2bb9c41b3930a6757eb6c5e9);\n","        \n","    \n","        var popup_fd169f913cbba9d5242337d899845d9b = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_741179b5249dc8398431de86256e79ea = $(`&lt;div id=&quot;html_741179b5249dc8398431de86256e79ea&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 11&lt;br&gt;Remaining Days: -6&lt;/div&gt;`)[0];\n","                popup_fd169f913cbba9d5242337d899845d9b.setContent(html_741179b5249dc8398431de86256e79ea);\n","            \n","        \n","\n","        marker_180458e14619cc44b567432c82be313b.bindPopup(popup_fd169f913cbba9d5242337d899845d9b)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_6e5ee97c8960dc8012f1bec8d8876b19 = L.marker(\n","                [37.2655, 127.02559],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_8270fcded1edf17f92344cfbfd2a6930 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_6e5ee97c8960dc8012f1bec8d8876b19.setIcon(icon_8270fcded1edf17f92344cfbfd2a6930);\n","        \n","    \n","        var popup_edb9d01dbadf1cd33af9add1d98d6062 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_87dbcc6d36ab731ca70d85c35af9af25 = $(`&lt;div id=&quot;html_87dbcc6d36ab731ca70d85c35af9af25&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 15&lt;br&gt;Remaining Days: -9&lt;/div&gt;`)[0];\n","                popup_edb9d01dbadf1cd33af9add1d98d6062.setContent(html_87dbcc6d36ab731ca70d85c35af9af25);\n","            \n","        \n","\n","        marker_6e5ee97c8960dc8012f1bec8d8876b19.bindPopup(popup_edb9d01dbadf1cd33af9add1d98d6062)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_73c7a125679c3d8b6bf42f6044cf196d = L.marker(\n","                [37.265, 127.03],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_40092338ca38d32aa09d0ec991ad43e8 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_73c7a125679c3d8b6bf42f6044cf196d.setIcon(icon_40092338ca38d32aa09d0ec991ad43e8);\n","        \n","    \n","        var popup_0747c607ad244dde252d7e0dec0fa8e7 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_055648e41799e7489d18ba4583bbf2b6 = $(`&lt;div id=&quot;html_055648e41799e7489d18ba4583bbf2b6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 1&lt;br&gt;Remaining Days: -2&lt;/div&gt;`)[0];\n","                popup_0747c607ad244dde252d7e0dec0fa8e7.setContent(html_055648e41799e7489d18ba4583bbf2b6);\n","            \n","        \n","\n","        marker_73c7a125679c3d8b6bf42f6044cf196d.bindPopup(popup_0747c607ad244dde252d7e0dec0fa8e7)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_eba30a7b72bfe92770d8f1b5f2a20706 = L.marker(\n","                [37.263, 127.036],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_70bbc85d5000c54c64f134bc9126067d = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_eba30a7b72bfe92770d8f1b5f2a20706.setIcon(icon_70bbc85d5000c54c64f134bc9126067d);\n","        \n","    \n","        var popup_e33e9a36b481eed0cd53d0c30120ab87 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_f51b19c7787ee064262581352dfd60a2 = $(`&lt;div id=&quot;html_f51b19c7787ee064262581352dfd60a2&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 14&lt;br&gt;Remaining Days: 0&lt;/div&gt;`)[0];\n","                popup_e33e9a36b481eed0cd53d0c30120ab87.setContent(html_f51b19c7787ee064262581352dfd60a2);\n","            \n","        \n","\n","        marker_eba30a7b72bfe92770d8f1b5f2a20706.bindPopup(popup_e33e9a36b481eed0cd53d0c30120ab87)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_33e463ca12deb0f2ba3befa8759de4ca = L.marker(\n","                [37.266, 127.035],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_31048303d287753f93cd8ae852f30ba9 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_33e463ca12deb0f2ba3befa8759de4ca.setIcon(icon_31048303d287753f93cd8ae852f30ba9);\n","        \n","    \n","        var popup_ef169769463f580a4f42fdffbba2242c = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_603f54bed9169492ab98e926bdc7b0f9 = $(`&lt;div id=&quot;html_603f54bed9169492ab98e926bdc7b0f9&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 7&lt;br&gt;Remaining Days: -3&lt;/div&gt;`)[0];\n","                popup_ef169769463f580a4f42fdffbba2242c.setContent(html_603f54bed9169492ab98e926bdc7b0f9);\n","            \n","        \n","\n","        marker_33e463ca12deb0f2ba3befa8759de4ca.bindPopup(popup_ef169769463f580a4f42fdffbba2242c)\n","        ;\n","\n","        \n","    \n","    \n","            var marker_56282d34af0a63da560c9b4b1eea6628 = L.marker(\n","                [37.27, 127.037],\n","                {}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","    \n","            var icon_700fd655055e9fa00080e95057732c84 = L.AwesomeMarkers.icon(\n","                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;blue&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}\n","            );\n","            marker_56282d34af0a63da560c9b4b1eea6628.setIcon(icon_700fd655055e9fa00080e95057732c84);\n","        \n","    \n","        var popup_d412f7a41ead22864932be8ac0b44bbd = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});\n","\n","        \n","            \n","                var html_8e38453897f38ed741c9d31444b649bc = $(`&lt;div id=&quot;html_8e38453897f38ed741c9d31444b649bc&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;&gt;ID: 9&lt;br&gt;Remaining Days: -4&lt;/div&gt;`)[0];\n","                popup_d412f7a41ead22864932be8ac0b44bbd.setContent(html_8e38453897f38ed741c9d31444b649bc);\n","            \n","        \n","\n","        marker_56282d34af0a63da560c9b4b1eea6628.bindPopup(popup_d412f7a41ead22864932be8ac0b44bbd)\n","        ;\n","\n","        \n","    \n","    \n","            var poly_line_641bcbc84b577b43b65dd75ba53206a9 = L.polyline(\n","                [[37.262, 127.027], [37.2615, 127.026], [37.26, 127.025], [37.2575, 127.0205], [37.259, 127.022], [37.2655, 127.02559], [37.265, 127.03], [37.263, 127.036], [37.266, 127.035], [37.27, 127.037]],\n","                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;blue&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 2.5}\n","            ).addTo(map_755eab054921a222b88b150cb264d00b);\n","        \n","&lt;/script&gt;\n","&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["from fastapi import FastAPI, HTTPException\n","from pydantic import BaseModel, Field\n","from typing import List, Optional\n","from datetime import date\n","\n","# 데이터 모델 정의\n","class Location(BaseModel):\n","    latitude: float = Field(..., description=\"위도\", example=37.2636)\n","    longitude: float = Field(..., description=\"경도\", example=127.0286)\n","\n","class Patient(BaseModel):\n","    id: int = Field(..., description=\"환자 고유 ID\", example=1)\n","    location: List[float] = Field(..., description=\"환자 위치 [위도, 경도]\", example=[37.2650, 127.0300])\n","    remaining_days: int = Field(..., description=\"진료 예정일까지 남은 일수 (음수는 지난 일수)\", example=-2)\n","\n","class RouteRequest(BaseModel):\n","    patients: List[Patient] = Field(..., description=\"환자 목록\")\n","    doctor_location: List[float] = Field(..., description=\"의사 현재 위치 [위도, 경도]\", example=[37.2636, 127.0286])\n","    additional_calls: List[int] = Field(..., description=\"추가 호출된 환자 ID 목록\", example=[3, 11])\n","\n","class RouteResponse(BaseModel):\n","    route: List[List[float]] = Field(..., description=\"최적화된 방문 경로 좌표 목록\")\n","    total_patients: int = Field(..., description=\"방문할 총 환자 수\")\n","    route_details: List[dict] = Field(..., description=\"상세 경로 정보\")\n","\n","# API 엔드포인트 명세\n","\"\"\"\n","API 엔드포인트: /process_data\n","메소드: POST\n","설명: 환자 방문 경로 최적화 API\n","\n","요청 예시:\n","{\n","    \"patients\": [\n","        {\n","            \"id\": 1,\n","            \"location\": [37.2650, 127.0300],\n","            \"remaining_days\": -2\n","        },\n","        {\n","            \"id\": 2,\n","            \"location\": [37.2620, 127.0270],\n","            \"remaining_days\": -5\n","        }\n","    ],\n","    \"doctor_location\": [37.2636, 127.0286],\n","    \"additional_calls\": [3, 11]\n","}\n","\n","응답 예시:\n","{\n","    \"route\": [\n","        [37.2650, 127.0300],\n","        [37.2620, 127.0270]\n","    ],\n","    \"total_patients\": 2,\n","    \"route_details\": [\n","        {\n","            \"order\": 1,\n","            \"patient_id\": 1,\n","            \"status\": \"우선순위 환자\",\n","            \"location\": [37.2650, 127.0300]\n","        },\n","        {\n","            \"order\": 2,\n","            \"patient_id\": 2,\n","            \"status\": \"\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":108},"id":"OVsJUONbNZGA","executionInfo":{"status":"ok","timestamp":1732322627474,"user_tz":-540,"elapsed":30,"user":{"displayName":"채정윤","userId":"10690917488150404182"}},"outputId":"a00b250e-9ab2-4ebe-b402-3240c4426fbc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nAPI 엔드포인트: /process_data\\n메소드: POST\\n설명: 환자 방문 경로 최적화 API\\n\\n요청 예시:\\n{\\n    \"patients\": [\\n        {\\n            \"id\": 1,\\n            \"location\": [37.2650, 127.0300],\\n            \"remaining_days\": -2\\n        },\\n        {\\n            \"id\": 2,\\n            \"location\": [37.2620, 127.0270],\\n            \"remaining_days\": -5\\n        }\\n    ],\\n    \"doctor_location\": [37.2636, 127.0286],\\n    \"additional_calls\": [3, 11]\\n}\\n\\n응답 예시:\\n{\\n    \"route\": [\\n        [37.2650, 127.0300],\\n        [37.2620, 127.0270]\\n    ],\\n    \"total_patients\": 2,\\n    \"route_details\": [\\n        {\\n            \"order\": 1,\\n            \"patient_id\": 1,\\n            \"status\": \"우선순위 환자\",\\n            \"location\": [37.2650, 127.0300]\\n        },\\n        {\\n            \"order\": 2,\\n            \"patient_id\": 2,\\n            \"status\": \"\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]}]}